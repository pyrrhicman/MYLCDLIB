
mlcd_CPU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000094a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000009be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800060  00800060  000009be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001124  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000713  00000000  00000000  00001b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000056a  00000000  00000000  000022a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00002810  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f2  00000000  00000000  000028b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000072c  00000000  00000000  00002ea2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000035ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2b 00 	jmp	0x56	; 0x56 <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

00000054 <__ctors_start>:
  54:	98 04       	cpc	r9, r8

00000056 <__ctors_end>:
  56:	11 24       	eor	r1, r1
  58:	1f be       	out	0x3f, r1	; 63
  5a:	cf e5       	ldi	r28, 0x5F	; 95
  5c:	d8 e0       	ldi	r29, 0x08	; 8
  5e:	de bf       	out	0x3e, r29	; 62
  60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_clear_bss>:
  62:	20 e0       	ldi	r18, 0x00	; 0
  64:	a0 e6       	ldi	r26, 0x60	; 96
  66:	b0 e0       	ldi	r27, 0x00	; 0
  68:	01 c0       	rjmp	.+2      	; 0x6c <.do_clear_bss_start>

0000006a <.do_clear_bss_loop>:
  6a:	1d 92       	st	X+, r1

0000006c <.do_clear_bss_start>:
  6c:	a6 37       	cpi	r26, 0x76	; 118
  6e:	b2 07       	cpc	r27, r18
  70:	e1 f7       	brne	.-8      	; 0x6a <.do_clear_bss_loop>

00000072 <__do_global_ctors>:
  72:	10 e0       	ldi	r17, 0x00	; 0
  74:	cb e2       	ldi	r28, 0x2B	; 43
  76:	d0 e0       	ldi	r29, 0x00	; 0
  78:	04 c0       	rjmp	.+8      	; 0x82 <__do_global_ctors+0x10>
  7a:	21 97       	sbiw	r28, 0x01	; 1
  7c:	fe 01       	movw	r30, r28
  7e:	0e 94 9d 04 	call	0x93a	; 0x93a <__tablejump2__>
  82:	ca 32       	cpi	r28, 0x2A	; 42
  84:	d1 07       	cpc	r29, r17
  86:	c9 f7       	brne	.-14     	; 0x7a <__do_global_ctors+0x8>
  88:	0e 94 31 04 	call	0x862	; 0x862 <main>
  8c:	0c 94 a3 04 	jmp	0x946	; 0x946 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <_ZN6CH_LCDC1Ev>:
ï»¿#include "mlcd.h"
#define E_DELAY 1
# ifdef _CH_LCD_


CH_LCD :: CH_LCD ()
  94:	fc 01       	movw	r30, r24
{
	RS_PORT = 0x1B ; RS_DDR = 0x1A ; RS_Bit = 0 ;
  96:	9b e1       	ldi	r25, 0x1B	; 27
  98:	90 83       	st	Z, r25
  9a:	8a e1       	ldi	r24, 0x1A	; 26
  9c:	81 83       	std	Z+1, r24	; 0x01
  9e:	12 82       	std	Z+2, r1	; 0x02
	RW_PORT = 0x1B ; RW_DDR = 0x1A ; RW_Bit = 1 ;
  a0:	93 83       	std	Z+3, r25	; 0x03
  a2:	84 83       	std	Z+4, r24	; 0x04
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	25 83       	std	Z+5, r18	; 0x05
	E_PORT = 0x1B ; E_DDR = 0x1A ; E_Bit  = 2 ;
  a8:	96 83       	std	Z+6, r25	; 0x06
  aa:	87 83       	std	Z+7, r24	; 0x07
  ac:	22 e0       	ldi	r18, 0x02	; 2
  ae:	20 87       	std	Z+8, r18	; 0x08

	D4_PORT = 0x1B ; D4_DDR = 0x1A ; D4_Bit = 3 ;
  b0:	91 87       	std	Z+9, r25	; 0x09
  b2:	82 87       	std	Z+10, r24	; 0x0a
  b4:	23 e0       	ldi	r18, 0x03	; 3
  b6:	23 87       	std	Z+11, r18	; 0x0b
	D5_PORT = 0x1B ; D5_DDR = 0x1A ; D5_Bit = 4 ;
  b8:	94 87       	std	Z+12, r25	; 0x0c
  ba:	85 87       	std	Z+13, r24	; 0x0d
  bc:	24 e0       	ldi	r18, 0x04	; 4
  be:	26 87       	std	Z+14, r18	; 0x0e
	D6_PORT = 0x1B ; D6_DDR = 0x1A ; D6_Bit = 5 ;
  c0:	97 87       	std	Z+15, r25	; 0x0f
  c2:	80 8b       	std	Z+16, r24	; 0x10
  c4:	25 e0       	ldi	r18, 0x05	; 5
  c6:	21 8b       	std	Z+17, r18	; 0x11
	D7_PORT = 0x1B ; D7_DDR = 0x1A ; D7_Bit = 6 ;	
  c8:	92 8b       	std	Z+18, r25	; 0x12
  ca:	83 8b       	std	Z+19, r24	; 0x13
  cc:	86 e0       	ldi	r24, 0x06	; 6
  ce:	84 8b       	std	Z+20, r24	; 0x14
  d0:	08 95       	ret

000000d2 <_ZN6CH_LCD4InitEv>:
}

void CH_LCD :: Init()//Initializes LCD
{
  d2:	fc 01       	movw	r30, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	8f e2       	ldi	r24, 0x2F	; 47
  d6:	95 e7       	ldi	r25, 0x75	; 117
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <_ZN6CH_LCD4InitEv+0x6>
  dc:	00 c0       	rjmp	.+0      	; 0xde <_ZN6CH_LCD4InitEv+0xc>
  de:	00 00       	nop
	_delay_ms(15);

	/////////////////////////////	SETTING DDR		///////////////////////////
	_SFR_IO8(D4_PORT) &= ~(1<<D4_Bit) ; // THESE 5 IS GOING TO TURN D4,D5,D6,D7,EN To INPUT
  e0:	a1 85       	ldd	r26, Z+9	; 0x09
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	90 96       	adiw	r26, 0x20	; 32
  e6:	3c 91       	ld	r19, X
  e8:	90 97       	sbiw	r26, 0x20	; 32
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	ac 01       	movw	r20, r24
  f0:	03 84       	ldd	r0, Z+11	; 0x0b
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <_ZN6CH_LCD4InitEv+0x26>
  f4:	44 0f       	add	r20, r20
  f6:	55 1f       	adc	r21, r21
  f8:	0a 94       	dec	r0
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <_ZN6CH_LCD4InitEv+0x22>
  fc:	24 2f       	mov	r18, r20
  fe:	20 95       	com	r18
 100:	23 23       	and	r18, r19
 102:	90 96       	adiw	r26, 0x20	; 32
 104:	2c 93       	st	X, r18
	_SFR_IO8(D5_PORT) &= ~(1<<D5_Bit) ;
 106:	a4 85       	ldd	r26, Z+12	; 0x0c
 108:	b0 e0       	ldi	r27, 0x00	; 0
 10a:	90 96       	adiw	r26, 0x20	; 32
 10c:	3c 91       	ld	r19, X
 10e:	90 97       	sbiw	r26, 0x20	; 32
 110:	ac 01       	movw	r20, r24
 112:	06 84       	ldd	r0, Z+14	; 0x0e
 114:	02 c0       	rjmp	.+4      	; 0x11a <_ZN6CH_LCD4InitEv+0x48>
 116:	44 0f       	add	r20, r20
 118:	55 1f       	adc	r21, r21
 11a:	0a 94       	dec	r0
 11c:	e2 f7       	brpl	.-8      	; 0x116 <_ZN6CH_LCD4InitEv+0x44>
 11e:	24 2f       	mov	r18, r20
 120:	20 95       	com	r18
 122:	23 23       	and	r18, r19
 124:	90 96       	adiw	r26, 0x20	; 32
 126:	2c 93       	st	X, r18
	_SFR_IO8(D6_PORT) &= ~(1<<D6_Bit) ;
 128:	a7 85       	ldd	r26, Z+15	; 0x0f
 12a:	b0 e0       	ldi	r27, 0x00	; 0
 12c:	90 96       	adiw	r26, 0x20	; 32
 12e:	3c 91       	ld	r19, X
 130:	90 97       	sbiw	r26, 0x20	; 32
 132:	ac 01       	movw	r20, r24
 134:	01 88       	ldd	r0, Z+17	; 0x11
 136:	02 c0       	rjmp	.+4      	; 0x13c <_ZN6CH_LCD4InitEv+0x6a>
 138:	44 0f       	add	r20, r20
 13a:	55 1f       	adc	r21, r21
 13c:	0a 94       	dec	r0
 13e:	e2 f7       	brpl	.-8      	; 0x138 <_ZN6CH_LCD4InitEv+0x66>
 140:	24 2f       	mov	r18, r20
 142:	20 95       	com	r18
 144:	23 23       	and	r18, r19
 146:	90 96       	adiw	r26, 0x20	; 32
 148:	2c 93       	st	X, r18
	_SFR_IO8(D7_PORT) &= ~(1<<D7_Bit) ;
 14a:	a2 89       	ldd	r26, Z+18	; 0x12
 14c:	b0 e0       	ldi	r27, 0x00	; 0
 14e:	90 96       	adiw	r26, 0x20	; 32
 150:	3c 91       	ld	r19, X
 152:	90 97       	sbiw	r26, 0x20	; 32
 154:	ac 01       	movw	r20, r24
 156:	04 88       	ldd	r0, Z+20	; 0x14
 158:	02 c0       	rjmp	.+4      	; 0x15e <_ZN6CH_LCD4InitEv+0x8c>
 15a:	44 0f       	add	r20, r20
 15c:	55 1f       	adc	r21, r21
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <_ZN6CH_LCD4InitEv+0x88>
 162:	24 2f       	mov	r18, r20
 164:	20 95       	com	r18
 166:	23 23       	and	r18, r19
 168:	90 96       	adiw	r26, 0x20	; 32
 16a:	2c 93       	st	X, r18
	_SFR_IO8(E_PORT)  &= ~(1<<E_Bit);
 16c:	a6 81       	ldd	r26, Z+6	; 0x06
 16e:	b0 e0       	ldi	r27, 0x00	; 0
 170:	90 96       	adiw	r26, 0x20	; 32
 172:	3c 91       	ld	r19, X
 174:	90 97       	sbiw	r26, 0x20	; 32
 176:	ac 01       	movw	r20, r24
 178:	00 84       	ldd	r0, Z+8	; 0x08
 17a:	02 c0       	rjmp	.+4      	; 0x180 <_ZN6CH_LCD4InitEv+0xae>
 17c:	44 0f       	add	r20, r20
 17e:	55 1f       	adc	r21, r21
 180:	0a 94       	dec	r0
 182:	e2 f7       	brpl	.-8      	; 0x17c <_ZN6CH_LCD4InitEv+0xaa>
 184:	24 2f       	mov	r18, r20
 186:	20 95       	com	r18
 188:	23 23       	and	r18, r19
 18a:	90 96       	adiw	r26, 0x20	; 32
 18c:	2c 93       	st	X, r18
	//D4  D5  D6  D7	SETTING DDR
	//0   0   0   0
	
	_SFR_IO8(D4_DDR)  |= 1<<D4_Bit ;
 18e:	a2 85       	ldd	r26, Z+10	; 0x0a
 190:	b0 e0       	ldi	r27, 0x00	; 0
 192:	90 96       	adiw	r26, 0x20	; 32
 194:	4c 91       	ld	r20, X
 196:	90 97       	sbiw	r26, 0x20	; 32
 198:	9c 01       	movw	r18, r24
 19a:	03 84       	ldd	r0, Z+11	; 0x0b
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <_ZN6CH_LCD4InitEv+0xd0>
 19e:	22 0f       	add	r18, r18
 1a0:	33 1f       	adc	r19, r19
 1a2:	0a 94       	dec	r0
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <_ZN6CH_LCD4InitEv+0xcc>
 1a6:	24 2b       	or	r18, r20
 1a8:	90 96       	adiw	r26, 0x20	; 32
 1aa:	2c 93       	st	X, r18
	_SFR_IO8(D5_DDR)  |= 1<<D5_Bit ;
 1ac:	a5 85       	ldd	r26, Z+13	; 0x0d
 1ae:	b0 e0       	ldi	r27, 0x00	; 0
 1b0:	90 96       	adiw	r26, 0x20	; 32
 1b2:	4c 91       	ld	r20, X
 1b4:	90 97       	sbiw	r26, 0x20	; 32
 1b6:	9c 01       	movw	r18, r24
 1b8:	06 84       	ldd	r0, Z+14	; 0x0e
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <_ZN6CH_LCD4InitEv+0xee>
 1bc:	22 0f       	add	r18, r18
 1be:	33 1f       	adc	r19, r19
 1c0:	0a 94       	dec	r0
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <_ZN6CH_LCD4InitEv+0xea>
 1c4:	24 2b       	or	r18, r20
 1c6:	90 96       	adiw	r26, 0x20	; 32
 1c8:	2c 93       	st	X, r18
	_SFR_IO8(D6_DDR)  |= 1<<D6_Bit ;
 1ca:	a0 89       	ldd	r26, Z+16	; 0x10
 1cc:	b0 e0       	ldi	r27, 0x00	; 0
 1ce:	90 96       	adiw	r26, 0x20	; 32
 1d0:	4c 91       	ld	r20, X
 1d2:	90 97       	sbiw	r26, 0x20	; 32
 1d4:	9c 01       	movw	r18, r24
 1d6:	01 88       	ldd	r0, Z+17	; 0x11
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <_ZN6CH_LCD4InitEv+0x10c>
 1da:	22 0f       	add	r18, r18
 1dc:	33 1f       	adc	r19, r19
 1de:	0a 94       	dec	r0
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <_ZN6CH_LCD4InitEv+0x108>
 1e2:	24 2b       	or	r18, r20
 1e4:	90 96       	adiw	r26, 0x20	; 32
 1e6:	2c 93       	st	X, r18
	_SFR_IO8(D7_DDR)  |= 1<<D7_Bit ;
 1e8:	a3 89       	ldd	r26, Z+19	; 0x13
 1ea:	b0 e0       	ldi	r27, 0x00	; 0
 1ec:	90 96       	adiw	r26, 0x20	; 32
 1ee:	4c 91       	ld	r20, X
 1f0:	90 97       	sbiw	r26, 0x20	; 32
 1f2:	9c 01       	movw	r18, r24
 1f4:	04 88       	ldd	r0, Z+20	; 0x14
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <_ZN6CH_LCD4InitEv+0x12a>
 1f8:	22 0f       	add	r18, r18
 1fa:	33 1f       	adc	r19, r19
 1fc:	0a 94       	dec	r0
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <_ZN6CH_LCD4InitEv+0x126>
 200:	24 2b       	or	r18, r20
 202:	90 96       	adiw	r26, 0x20	; 32
 204:	2c 93       	st	X, r18
	_SFR_IO8(E_DDR)   |= 1<<E_Bit  ;
 206:	a7 81       	ldd	r26, Z+7	; 0x07
 208:	b0 e0       	ldi	r27, 0x00	; 0
 20a:	90 96       	adiw	r26, 0x20	; 32
 20c:	4c 91       	ld	r20, X
 20e:	90 97       	sbiw	r26, 0x20	; 32
 210:	9c 01       	movw	r18, r24
 212:	00 84       	ldd	r0, Z+8	; 0x08
 214:	02 c0       	rjmp	.+4      	; 0x21a <_ZN6CH_LCD4InitEv+0x148>
 216:	22 0f       	add	r18, r18
 218:	33 1f       	adc	r19, r19
 21a:	0a 94       	dec	r0
 21c:	e2 f7       	brpl	.-8      	; 0x216 <_ZN6CH_LCD4InitEv+0x144>
 21e:	24 2b       	or	r18, r20
 220:	90 96       	adiw	r26, 0x20	; 32
 222:	2c 93       	st	X, r18
	_SFR_IO8(RS_DDR)  |= 1<<RS_Bit ;
 224:	a1 81       	ldd	r26, Z+1	; 0x01
 226:	b0 e0       	ldi	r27, 0x00	; 0
 228:	90 96       	adiw	r26, 0x20	; 32
 22a:	4c 91       	ld	r20, X
 22c:	90 97       	sbiw	r26, 0x20	; 32
 22e:	9c 01       	movw	r18, r24
 230:	02 80       	ldd	r0, Z+2	; 0x02
 232:	02 c0       	rjmp	.+4      	; 0x238 <_ZN6CH_LCD4InitEv+0x166>
 234:	22 0f       	add	r18, r18
 236:	33 1f       	adc	r19, r19
 238:	0a 94       	dec	r0
 23a:	e2 f7       	brpl	.-8      	; 0x234 <_ZN6CH_LCD4InitEv+0x162>
 23c:	24 2b       	or	r18, r20
 23e:	90 96       	adiw	r26, 0x20	; 32
 240:	2c 93       	st	X, r18
	_SFR_IO8(RW_DDR)  |= 1<<RW_Bit ;
 242:	a4 81       	ldd	r26, Z+4	; 0x04
 244:	b0 e0       	ldi	r27, 0x00	; 0
 246:	90 96       	adiw	r26, 0x20	; 32
 248:	4c 91       	ld	r20, X
 24a:	90 97       	sbiw	r26, 0x20	; 32
 24c:	9c 01       	movw	r18, r24
 24e:	05 80       	ldd	r0, Z+5	; 0x05
 250:	02 c0       	rjmp	.+4      	; 0x256 <_ZN6CH_LCD4InitEv+0x184>
 252:	22 0f       	add	r18, r18
 254:	33 1f       	adc	r19, r19
 256:	0a 94       	dec	r0
 258:	e2 f7       	brpl	.-8      	; 0x252 <_ZN6CH_LCD4InitEv+0x180>
 25a:	24 2b       	or	r18, r20
 25c:	90 96       	adiw	r26, 0x20	; 32
 25e:	2c 93       	st	X, r18
	//D4  D5  D6  D7  E  RS  RW			SETTING DDR
	//1   1   1	  1   1  1   1
	/////////////////////////////	SETTING DDR	DONE	///////////////////////////

	//_SFR_IO8(RS_PORT) |=   1<<RS_Bit ;
	_SFR_IO8(RS_PORT) &= ~(1<<RS_Bit);
 260:	a0 81       	ld	r26, Z
 262:	b0 e0       	ldi	r27, 0x00	; 0
 264:	90 96       	adiw	r26, 0x20	; 32
 266:	3c 91       	ld	r19, X
 268:	90 97       	sbiw	r26, 0x20	; 32
 26a:	ac 01       	movw	r20, r24
 26c:	02 80       	ldd	r0, Z+2	; 0x02
 26e:	02 c0       	rjmp	.+4      	; 0x274 <_ZN6CH_LCD4InitEv+0x1a2>
 270:	44 0f       	add	r20, r20
 272:	55 1f       	adc	r21, r21
 274:	0a 94       	dec	r0
 276:	e2 f7       	brpl	.-8      	; 0x270 <_ZN6CH_LCD4InitEv+0x19e>
 278:	24 2f       	mov	r18, r20
 27a:	20 95       	com	r18
 27c:	23 23       	and	r18, r19
 27e:	90 96       	adiw	r26, 0x20	; 32
 280:	2c 93       	st	X, r18
	
	//_SFR_IO8(RW_PORT) |=   1<<RW_Bit ;
	_SFR_IO8(RW_PORT) &= ~(1<<RW_Bit);
 282:	a3 81       	ldd	r26, Z+3	; 0x03
 284:	b0 e0       	ldi	r27, 0x00	; 0
 286:	90 96       	adiw	r26, 0x20	; 32
 288:	3c 91       	ld	r19, X
 28a:	90 97       	sbiw	r26, 0x20	; 32
 28c:	ac 01       	movw	r20, r24
 28e:	05 80       	ldd	r0, Z+5	; 0x05
 290:	02 c0       	rjmp	.+4      	; 0x296 <_ZN6CH_LCD4InitEv+0x1c4>
 292:	44 0f       	add	r20, r20
 294:	55 1f       	adc	r21, r21
 296:	0a 94       	dec	r0
 298:	e2 f7       	brpl	.-8      	; 0x292 <_ZN6CH_LCD4InitEv+0x1c0>
 29a:	24 2f       	mov	r18, r20
 29c:	20 95       	com	r18
 29e:	23 23       	and	r18, r19
 2a0:	90 96       	adiw	r26, 0x20	; 32
 2a2:	2c 93       	st	X, r18
	
	//_SFR_IO8(D7_PORT) |=   1<<D7_Bit ;
	_SFR_IO8(D7_PORT) &= ~(1<<D7_Bit);
 2a4:	a2 89       	ldd	r26, Z+18	; 0x12
 2a6:	b0 e0       	ldi	r27, 0x00	; 0
 2a8:	90 96       	adiw	r26, 0x20	; 32
 2aa:	3c 91       	ld	r19, X
 2ac:	90 97       	sbiw	r26, 0x20	; 32
 2ae:	ac 01       	movw	r20, r24
 2b0:	04 88       	ldd	r0, Z+20	; 0x14
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <_ZN6CH_LCD4InitEv+0x1e6>
 2b4:	44 0f       	add	r20, r20
 2b6:	55 1f       	adc	r21, r21
 2b8:	0a 94       	dec	r0
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <_ZN6CH_LCD4InitEv+0x1e2>
 2bc:	24 2f       	mov	r18, r20
 2be:	20 95       	com	r18
 2c0:	23 23       	and	r18, r19
 2c2:	90 96       	adiw	r26, 0x20	; 32
 2c4:	2c 93       	st	X, r18

	//_SFR_IO8(D6_PORT) |=   1<<D6_Bit ;
	_SFR_IO8(D6_PORT) &= ~(1<<D6_Bit);
 2c6:	a7 85       	ldd	r26, Z+15	; 0x0f
 2c8:	b0 e0       	ldi	r27, 0x00	; 0
 2ca:	90 96       	adiw	r26, 0x20	; 32
 2cc:	3c 91       	ld	r19, X
 2ce:	90 97       	sbiw	r26, 0x20	; 32
 2d0:	ac 01       	movw	r20, r24
 2d2:	01 88       	ldd	r0, Z+17	; 0x11
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <_ZN6CH_LCD4InitEv+0x208>
 2d6:	44 0f       	add	r20, r20
 2d8:	55 1f       	adc	r21, r21
 2da:	0a 94       	dec	r0
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <_ZN6CH_LCD4InitEv+0x204>
 2de:	24 2f       	mov	r18, r20
 2e0:	20 95       	com	r18
 2e2:	23 23       	and	r18, r19
 2e4:	90 96       	adiw	r26, 0x20	; 32
 2e6:	2c 93       	st	X, r18
	
	_SFR_IO8(D5_PORT) |=   1<<D5_Bit ;
 2e8:	a4 85       	ldd	r26, Z+12	; 0x0c
 2ea:	b0 e0       	ldi	r27, 0x00	; 0
 2ec:	90 96       	adiw	r26, 0x20	; 32
 2ee:	4c 91       	ld	r20, X
 2f0:	90 97       	sbiw	r26, 0x20	; 32
 2f2:	9c 01       	movw	r18, r24
 2f4:	06 84       	ldd	r0, Z+14	; 0x0e
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <_ZN6CH_LCD4InitEv+0x22a>
 2f8:	22 0f       	add	r18, r18
 2fa:	33 1f       	adc	r19, r19
 2fc:	0a 94       	dec	r0
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <_ZN6CH_LCD4InitEv+0x226>
 300:	24 2b       	or	r18, r20
 302:	90 96       	adiw	r26, 0x20	; 32
 304:	2c 93       	st	X, r18
	//_SFR_IO8(D5_PORT) &= ~(1<<D5_Bit);
	
	//_SFR_IO8(D4_PORT) |=   1<<D4_Bit ;
	_SFR_IO8(D4_PORT) &= ~(1<<D4_Bit);
 306:	a1 85       	ldd	r26, Z+9	; 0x09
 308:	b0 e0       	ldi	r27, 0x00	; 0
 30a:	90 96       	adiw	r26, 0x20	; 32
 30c:	3c 91       	ld	r19, X
 30e:	90 97       	sbiw	r26, 0x20	; 32
 310:	ac 01       	movw	r20, r24
 312:	03 84       	ldd	r0, Z+11	; 0x0b
 314:	02 c0       	rjmp	.+4      	; 0x31a <_ZN6CH_LCD4InitEv+0x248>
 316:	44 0f       	add	r20, r20
 318:	55 1f       	adc	r21, r21
 31a:	0a 94       	dec	r0
 31c:	e2 f7       	brpl	.-8      	; 0x316 <_ZN6CH_LCD4InitEv+0x244>
 31e:	24 2f       	mov	r18, r20
 320:	20 95       	com	r18
 322:	23 23       	and	r18, r19
 324:	90 96       	adiw	r26, 0x20	; 32
 326:	2c 93       	st	X, r18

	//SENDING
	_SFR_IO8(E_PORT)  |=   1<<E_Bit  ;
 328:	a6 81       	ldd	r26, Z+6	; 0x06
 32a:	b0 e0       	ldi	r27, 0x00	; 0
 32c:	90 96       	adiw	r26, 0x20	; 32
 32e:	4c 91       	ld	r20, X
 330:	90 97       	sbiw	r26, 0x20	; 32
 332:	9c 01       	movw	r18, r24
 334:	00 84       	ldd	r0, Z+8	; 0x08
 336:	02 c0       	rjmp	.+4      	; 0x33c <_ZN6CH_LCD4InitEv+0x26a>
 338:	22 0f       	add	r18, r18
 33a:	33 1f       	adc	r19, r19
 33c:	0a 94       	dec	r0
 33e:	e2 f7       	brpl	.-8      	; 0x338 <_ZN6CH_LCD4InitEv+0x266>
 340:	24 2b       	or	r18, r20
 342:	90 96       	adiw	r26, 0x20	; 32
 344:	2c 93       	st	X, r18
 346:	af ec       	ldi	r26, 0xCF	; 207
 348:	b7 e0       	ldi	r27, 0x07	; 7
 34a:	11 97       	sbiw	r26, 0x01	; 1
 34c:	f1 f7       	brne	.-4      	; 0x34a <_ZN6CH_LCD4InitEv+0x278>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <_ZN6CH_LCD4InitEv+0x27e>
 350:	00 00       	nop
	_delay_ms(E_DELAY);
	_SFR_IO8(E_PORT)  &=~(1<<E_Bit);  // All other bits untouched and E = 0
 352:	a6 81       	ldd	r26, Z+6	; 0x06
 354:	b0 e0       	ldi	r27, 0x00	; 0
 356:	90 96       	adiw	r26, 0x20	; 32
 358:	2c 91       	ld	r18, X
 35a:	90 97       	sbiw	r26, 0x20	; 32
 35c:	00 84       	ldd	r0, Z+8	; 0x08
 35e:	02 c0       	rjmp	.+4      	; 0x364 <_ZN6CH_LCD4InitEv+0x292>
 360:	88 0f       	add	r24, r24
 362:	99 1f       	adc	r25, r25
 364:	0a 94       	dec	r0
 366:	e2 f7       	brpl	.-8      	; 0x360 <_ZN6CH_LCD4InitEv+0x28e>
 368:	80 95       	com	r24
 36a:	82 23       	and	r24, r18
 36c:	90 96       	adiw	r26, 0x20	; 32
 36e:	8c 93       	st	X, r24
 370:	8f ec       	ldi	r24, 0xCF	; 207
 372:	97 e0       	ldi	r25, 0x07	; 7
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <_ZN6CH_LCD4InitEv+0x2a2>
 378:	00 c0       	rjmp	.+0      	; 0x37a <_ZN6CH_LCD4InitEv+0x2a8>
 37a:	00 00       	nop
 37c:	08 95       	ret

0000037e <_ZN6CH_LCD11SendCommandEhhh>:
	//SendCommand(12);
	//Clr();
}

void CH_LCD :: SendCommand(uint8_t rs_Bit,uint8_t rw_Bit,uint8_t command)	//Sends Command to LCD
{	
 37e:	8f 92       	push	r8
 380:	9f 92       	push	r9
 382:	af 92       	push	r10
 384:	bf 92       	push	r11
 386:	cf 92       	push	r12
 388:	df 92       	push	r13
 38a:	ef 92       	push	r14
 38c:	ff 92       	push	r15
 38e:	0f 93       	push	r16
 390:	1f 93       	push	r17
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	fc 01       	movw	r30, r24
	uint8_t lcd_D0 = command >> 0;
	uint8_t lcd_D1 = command >> 1;
 398:	82 2f       	mov	r24, r18
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	4c 01       	movw	r8, r24
 39e:	95 94       	asr	r9
 3a0:	87 94       	ror	r8
	uint8_t lcd_D2 = command >> 2;
 3a2:	ec 01       	movw	r28, r24
 3a4:	d5 95       	asr	r29
 3a6:	c7 95       	ror	r28
 3a8:	d5 95       	asr	r29
 3aa:	c7 95       	ror	r28
	uint8_t lcd_D3 = command >> 3;
 3ac:	8c 01       	movw	r16, r24
 3ae:	15 95       	asr	r17
 3b0:	07 95       	ror	r16
 3b2:	15 95       	asr	r17
 3b4:	07 95       	ror	r16
 3b6:	15 95       	asr	r17
 3b8:	07 95       	ror	r16
	uint8_t lcd_D4 = command >> 4;
 3ba:	7c 01       	movw	r14, r24
 3bc:	f5 94       	asr	r15
 3be:	e7 94       	ror	r14
 3c0:	f5 94       	asr	r15
 3c2:	e7 94       	ror	r14
 3c4:	f5 94       	asr	r15
 3c6:	e7 94       	ror	r14
 3c8:	f5 94       	asr	r15
 3ca:	e7 94       	ror	r14
	uint8_t lcd_D5 = command >> 5;
 3cc:	6c 01       	movw	r12, r24
 3ce:	d5 94       	asr	r13
 3d0:	c7 94       	ror	r12
 3d2:	d5 94       	asr	r13
 3d4:	c7 94       	ror	r12
 3d6:	d5 94       	asr	r13
 3d8:	c7 94       	ror	r12
 3da:	d5 94       	asr	r13
 3dc:	c7 94       	ror	r12
 3de:	d5 94       	asr	r13
 3e0:	c7 94       	ror	r12
	uint8_t lcd_D6 = command >> 6;
 3e2:	5c 01       	movw	r10, r24
 3e4:	0a 2c       	mov	r0, r10
 3e6:	ab 2c       	mov	r10, r11
 3e8:	00 0c       	add	r0, r0
 3ea:	aa 1c       	adc	r10, r10
 3ec:	bb 08       	sbc	r11, r11
 3ee:	00 0c       	add	r0, r0
 3f0:	aa 1c       	adc	r10, r10
 3f2:	bb 1c       	adc	r11, r11
	uint8_t lcd_D7 = command >> 7;
 3f4:	88 0f       	add	r24, r24
 3f6:	89 2f       	mov	r24, r25
 3f8:	88 1f       	adc	r24, r24
 3fa:	99 0b       	sbc	r25, r25
	
// FIRST MSB BITS SENDING
	if (rs_Bit & 1)  _SFR_IO8(RS_PORT) |=   1<<RS_Bit ;
 3fc:	60 ff       	sbrs	r22, 0
 3fe:	11 c0       	rjmp	.+34     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 400:	a0 81       	ld	r26, Z
 402:	b0 e0       	ldi	r27, 0x00	; 0
 404:	90 96       	adiw	r26, 0x20	; 32
 406:	3c 91       	ld	r19, X
 408:	90 97       	sbiw	r26, 0x20	; 32
 40a:	61 e0       	ldi	r22, 0x01	; 1
 40c:	70 e0       	ldi	r23, 0x00	; 0
 40e:	02 80       	ldd	r0, Z+2	; 0x02
 410:	02 c0       	rjmp	.+4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 412:	66 0f       	add	r22, r22
 414:	77 1f       	adc	r23, r23
 416:	0a 94       	dec	r0
 418:	e2 f7       	brpl	.-8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 41a:	63 2b       	or	r22, r19
 41c:	90 96       	adiw	r26, 0x20	; 32
 41e:	6c 93       	st	X, r22
 420:	11 c0       	rjmp	.+34     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
	else			 _SFR_IO8(RS_PORT) &= ~(1<<RS_Bit);
 422:	a0 81       	ld	r26, Z
 424:	b0 e0       	ldi	r27, 0x00	; 0
 426:	90 96       	adiw	r26, 0x20	; 32
 428:	3c 91       	ld	r19, X
 42a:	90 97       	sbiw	r26, 0x20	; 32
 42c:	61 e0       	ldi	r22, 0x01	; 1
 42e:	70 e0       	ldi	r23, 0x00	; 0
 430:	02 80       	ldd	r0, Z+2	; 0x02
 432:	02 c0       	rjmp	.+4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 434:	66 0f       	add	r22, r22
 436:	77 1f       	adc	r23, r23
 438:	0a 94       	dec	r0
 43a:	e2 f7       	brpl	.-8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 43c:	60 95       	com	r22
 43e:	63 23       	and	r22, r19
 440:	90 96       	adiw	r26, 0x20	; 32
 442:	6c 93       	st	X, r22
	
	if (rw_Bit & 1)  _SFR_IO8(RW_PORT) |=   1<<RW_Bit ;
 444:	40 ff       	sbrs	r20, 0
 446:	11 c0       	rjmp	.+34     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 448:	a3 81       	ldd	r26, Z+3	; 0x03
 44a:	b0 e0       	ldi	r27, 0x00	; 0
 44c:	90 96       	adiw	r26, 0x20	; 32
 44e:	3c 91       	ld	r19, X
 450:	90 97       	sbiw	r26, 0x20	; 32
 452:	41 e0       	ldi	r20, 0x01	; 1
 454:	50 e0       	ldi	r21, 0x00	; 0
 456:	05 80       	ldd	r0, Z+5	; 0x05
 458:	02 c0       	rjmp	.+4      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 45a:	44 0f       	add	r20, r20
 45c:	55 1f       	adc	r21, r21
 45e:	0a 94       	dec	r0
 460:	e2 f7       	brpl	.-8      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 462:	43 2b       	or	r20, r19
 464:	90 96       	adiw	r26, 0x20	; 32
 466:	4c 93       	st	X, r20
 468:	11 c0       	rjmp	.+34     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
	else			 _SFR_IO8(RW_PORT) &= ~(1<<RW_Bit);
 46a:	a3 81       	ldd	r26, Z+3	; 0x03
 46c:	b0 e0       	ldi	r27, 0x00	; 0
 46e:	90 96       	adiw	r26, 0x20	; 32
 470:	3c 91       	ld	r19, X
 472:	90 97       	sbiw	r26, 0x20	; 32
 474:	41 e0       	ldi	r20, 0x01	; 1
 476:	50 e0       	ldi	r21, 0x00	; 0
 478:	05 80       	ldd	r0, Z+5	; 0x05
 47a:	02 c0       	rjmp	.+4      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 47c:	44 0f       	add	r20, r20
 47e:	55 1f       	adc	r21, r21
 480:	0a 94       	dec	r0
 482:	e2 f7       	brpl	.-8      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 484:	40 95       	com	r20
 486:	43 23       	and	r20, r19
 488:	90 96       	adiw	r26, 0x20	; 32
 48a:	4c 93       	st	X, r20
	
	if (lcd_D7 & 1)  _SFR_IO8(D7_PORT) |=   1<<D7_Bit ;	
 48c:	80 ff       	sbrs	r24, 0
 48e:	11 c0       	rjmp	.+34     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 490:	a2 89       	ldd	r26, Z+18	; 0x12
 492:	b0 e0       	ldi	r27, 0x00	; 0
 494:	90 96       	adiw	r26, 0x20	; 32
 496:	3c 91       	ld	r19, X
 498:	90 97       	sbiw	r26, 0x20	; 32
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	04 88       	ldd	r0, Z+20	; 0x14
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 4a2:	88 0f       	add	r24, r24
 4a4:	99 1f       	adc	r25, r25
 4a6:	0a 94       	dec	r0
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 4aa:	83 2b       	or	r24, r19
 4ac:	90 96       	adiw	r26, 0x20	; 32
 4ae:	8c 93       	st	X, r24
 4b0:	11 c0       	rjmp	.+34     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
	else			 _SFR_IO8(D7_PORT) &= ~(1<<D7_Bit);	
 4b2:	a2 89       	ldd	r26, Z+18	; 0x12
 4b4:	b0 e0       	ldi	r27, 0x00	; 0
 4b6:	90 96       	adiw	r26, 0x20	; 32
 4b8:	3c 91       	ld	r19, X
 4ba:	90 97       	sbiw	r26, 0x20	; 32
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	04 88       	ldd	r0, Z+20	; 0x14
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4c4:	88 0f       	add	r24, r24
 4c6:	99 1f       	adc	r25, r25
 4c8:	0a 94       	dec	r0
 4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4cc:	80 95       	com	r24
 4ce:	83 23       	and	r24, r19
 4d0:	90 96       	adiw	r26, 0x20	; 32
 4d2:	8c 93       	st	X, r24

	if (lcd_D6 & 1)  _SFR_IO8(D6_PORT) |=   1<<D6_Bit ;
 4d4:	a0 fe       	sbrs	r10, 0
 4d6:	11 c0       	rjmp	.+34     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 4d8:	a7 85       	ldd	r26, Z+15	; 0x0f
 4da:	b0 e0       	ldi	r27, 0x00	; 0
 4dc:	90 96       	adiw	r26, 0x20	; 32
 4de:	3c 91       	ld	r19, X
 4e0:	90 97       	sbiw	r26, 0x20	; 32
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	01 88       	ldd	r0, Z+17	; 0x11
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4ea:	88 0f       	add	r24, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	0a 94       	dec	r0
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4f2:	83 2b       	or	r24, r19
 4f4:	90 96       	adiw	r26, 0x20	; 32
 4f6:	8c 93       	st	X, r24
 4f8:	11 c0       	rjmp	.+34     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
	else			 _SFR_IO8(D6_PORT) &= ~(1<<D6_Bit);
 4fa:	a7 85       	ldd	r26, Z+15	; 0x0f
 4fc:	b0 e0       	ldi	r27, 0x00	; 0
 4fe:	90 96       	adiw	r26, 0x20	; 32
 500:	3c 91       	ld	r19, X
 502:	90 97       	sbiw	r26, 0x20	; 32
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	01 88       	ldd	r0, Z+17	; 0x11
 50a:	02 c0       	rjmp	.+4      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
 50c:	88 0f       	add	r24, r24
 50e:	99 1f       	adc	r25, r25
 510:	0a 94       	dec	r0
 512:	e2 f7       	brpl	.-8      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 514:	80 95       	com	r24
 516:	83 23       	and	r24, r19
 518:	90 96       	adiw	r26, 0x20	; 32
 51a:	8c 93       	st	X, r24
	
	if (lcd_D5 & 1)  _SFR_IO8(D5_PORT) |=   1<<D5_Bit ;
 51c:	c0 fe       	sbrs	r12, 0
 51e:	11 c0       	rjmp	.+34     	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 520:	a4 85       	ldd	r26, Z+12	; 0x0c
 522:	b0 e0       	ldi	r27, 0x00	; 0
 524:	90 96       	adiw	r26, 0x20	; 32
 526:	3c 91       	ld	r19, X
 528:	90 97       	sbiw	r26, 0x20	; 32
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	06 84       	ldd	r0, Z+14	; 0x0e
 530:	02 c0       	rjmp	.+4      	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
 532:	88 0f       	add	r24, r24
 534:	99 1f       	adc	r25, r25
 536:	0a 94       	dec	r0
 538:	e2 f7       	brpl	.-8      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 53a:	83 2b       	or	r24, r19
 53c:	90 96       	adiw	r26, 0x20	; 32
 53e:	8c 93       	st	X, r24
 540:	11 c0       	rjmp	.+34     	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
	else			 _SFR_IO8(D5_PORT) &= ~(1<<D5_Bit);
 542:	a4 85       	ldd	r26, Z+12	; 0x0c
 544:	b0 e0       	ldi	r27, 0x00	; 0
 546:	90 96       	adiw	r26, 0x20	; 32
 548:	3c 91       	ld	r19, X
 54a:	90 97       	sbiw	r26, 0x20	; 32
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	06 84       	ldd	r0, Z+14	; 0x0e
 552:	02 c0       	rjmp	.+4      	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	0a 94       	dec	r0
 55a:	e2 f7       	brpl	.-8      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
 55c:	80 95       	com	r24
 55e:	83 23       	and	r24, r19
 560:	90 96       	adiw	r26, 0x20	; 32
 562:	8c 93       	st	X, r24
	
	if (lcd_D4 & 1)  _SFR_IO8(D4_PORT) |=   1<<D4_Bit ;
 564:	e0 fe       	sbrs	r14, 0
 566:	11 c0       	rjmp	.+34     	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
 568:	a1 85       	ldd	r26, Z+9	; 0x09
 56a:	b0 e0       	ldi	r27, 0x00	; 0
 56c:	90 96       	adiw	r26, 0x20	; 32
 56e:	3c 91       	ld	r19, X
 570:	90 97       	sbiw	r26, 0x20	; 32
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	03 84       	ldd	r0, Z+11	; 0x0b
 578:	02 c0       	rjmp	.+4      	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
 57a:	88 0f       	add	r24, r24
 57c:	99 1f       	adc	r25, r25
 57e:	0a 94       	dec	r0
 580:	e2 f7       	brpl	.-8      	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 582:	83 2b       	or	r24, r19
 584:	90 96       	adiw	r26, 0x20	; 32
 586:	8c 93       	st	X, r24
 588:	11 c0       	rjmp	.+34     	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
	else			 _SFR_IO8(D4_PORT) &= ~(1<<D4_Bit);
 58a:	a1 85       	ldd	r26, Z+9	; 0x09
 58c:	b0 e0       	ldi	r27, 0x00	; 0
 58e:	90 96       	adiw	r26, 0x20	; 32
 590:	3c 91       	ld	r19, X
 592:	90 97       	sbiw	r26, 0x20	; 32
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	03 84       	ldd	r0, Z+11	; 0x0b
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
 59c:	88 0f       	add	r24, r24
 59e:	99 1f       	adc	r25, r25
 5a0:	0a 94       	dec	r0
 5a2:	e2 f7       	brpl	.-8      	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 5a4:	80 95       	com	r24
 5a6:	83 23       	and	r24, r19
 5a8:	90 96       	adiw	r26, 0x20	; 32
 5aa:	8c 93       	st	X, r24

	//SENDING
	_SFR_IO8(E_PORT)  |=   1<<E_Bit  ;
 5ac:	a6 81       	ldd	r26, Z+6	; 0x06
 5ae:	b0 e0       	ldi	r27, 0x00	; 0
 5b0:	90 96       	adiw	r26, 0x20	; 32
 5b2:	3c 91       	ld	r19, X
 5b4:	90 97       	sbiw	r26, 0x20	; 32
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	ac 01       	movw	r20, r24
 5bc:	00 84       	ldd	r0, Z+8	; 0x08
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
 5c0:	44 0f       	add	r20, r20
 5c2:	55 1f       	adc	r21, r21
 5c4:	0a 94       	dec	r0
 5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
 5c8:	43 2b       	or	r20, r19
 5ca:	90 96       	adiw	r26, 0x20	; 32
 5cc:	4c 93       	st	X, r20
 5ce:	af ec       	ldi	r26, 0xCF	; 207
 5d0:	b7 e0       	ldi	r27, 0x07	; 7
 5d2:	11 97       	sbiw	r26, 0x01	; 1
 5d4:	f1 f7       	brne	.-4      	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
 5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 5d8:	00 00       	nop
	_delay_ms(E_DELAY);
	_SFR_IO8(E_PORT)  &=~(1<<E_Bit);  // All other bits untouched and E = 0
 5da:	a6 81       	ldd	r26, Z+6	; 0x06
 5dc:	b0 e0       	ldi	r27, 0x00	; 0
 5de:	90 96       	adiw	r26, 0x20	; 32
 5e0:	3c 91       	ld	r19, X
 5e2:	90 97       	sbiw	r26, 0x20	; 32
 5e4:	00 84       	ldd	r0, Z+8	; 0x08
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
 5e8:	88 0f       	add	r24, r24
 5ea:	99 1f       	adc	r25, r25
 5ec:	0a 94       	dec	r0
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
 5f0:	80 95       	com	r24
 5f2:	83 23       	and	r24, r19
 5f4:	90 96       	adiw	r26, 0x20	; 32
 5f6:	8c 93       	st	X, r24
 5f8:	8f ec       	ldi	r24, 0xCF	; 207
 5fa:	97 e0       	ldi	r25, 0x07	; 7
 5fc:	01 97       	sbiw	r24, 0x01	; 1
 5fe:	f1 f7       	brne	.-4      	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
 600:	00 c0       	rjmp	.+0      	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
 602:	00 00       	nop
	_delay_ms(E_DELAY);
	
	
// SECEND LSB BITS SENDING
if (lcd_D3 & 1)  _SFR_IO8(D7_PORT) |=   1<<D7_Bit ;
 604:	00 ff       	sbrs	r16, 0
 606:	11 c0       	rjmp	.+34     	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
 608:	a2 89       	ldd	r26, Z+18	; 0x12
 60a:	b0 e0       	ldi	r27, 0x00	; 0
 60c:	90 96       	adiw	r26, 0x20	; 32
 60e:	3c 91       	ld	r19, X
 610:	90 97       	sbiw	r26, 0x20	; 32
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	04 88       	ldd	r0, Z+20	; 0x14
 618:	02 c0       	rjmp	.+4      	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
 61a:	88 0f       	add	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	0a 94       	dec	r0
 620:	e2 f7       	brpl	.-8      	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
 622:	83 2b       	or	r24, r19
 624:	90 96       	adiw	r26, 0x20	; 32
 626:	8c 93       	st	X, r24
 628:	11 c0       	rjmp	.+34     	; 0x64c <__LOCK_REGION_LENGTH__+0x24c>
else			 _SFR_IO8(D7_PORT) &= ~(1<<D7_Bit);
 62a:	a2 89       	ldd	r26, Z+18	; 0x12
 62c:	b0 e0       	ldi	r27, 0x00	; 0
 62e:	90 96       	adiw	r26, 0x20	; 32
 630:	3c 91       	ld	r19, X
 632:	90 97       	sbiw	r26, 0x20	; 32
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	04 88       	ldd	r0, Z+20	; 0x14
 63a:	02 c0       	rjmp	.+4      	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
 63c:	88 0f       	add	r24, r24
 63e:	99 1f       	adc	r25, r25
 640:	0a 94       	dec	r0
 642:	e2 f7       	brpl	.-8      	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
 644:	80 95       	com	r24
 646:	83 23       	and	r24, r19
 648:	90 96       	adiw	r26, 0x20	; 32
 64a:	8c 93       	st	X, r24

if (lcd_D2 & 1)  _SFR_IO8(D6_PORT) |=   1<<D6_Bit ;
 64c:	c0 ff       	sbrs	r28, 0
 64e:	11 c0       	rjmp	.+34     	; 0x672 <__LOCK_REGION_LENGTH__+0x272>
 650:	a7 85       	ldd	r26, Z+15	; 0x0f
 652:	b0 e0       	ldi	r27, 0x00	; 0
 654:	90 96       	adiw	r26, 0x20	; 32
 656:	3c 91       	ld	r19, X
 658:	90 97       	sbiw	r26, 0x20	; 32
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	01 88       	ldd	r0, Z+17	; 0x11
 660:	02 c0       	rjmp	.+4      	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
 662:	88 0f       	add	r24, r24
 664:	99 1f       	adc	r25, r25
 666:	0a 94       	dec	r0
 668:	e2 f7       	brpl	.-8      	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
 66a:	83 2b       	or	r24, r19
 66c:	90 96       	adiw	r26, 0x20	; 32
 66e:	8c 93       	st	X, r24
 670:	11 c0       	rjmp	.+34     	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
else			 _SFR_IO8(D6_PORT) &= ~(1<<D6_Bit);
 672:	a7 85       	ldd	r26, Z+15	; 0x0f
 674:	b0 e0       	ldi	r27, 0x00	; 0
 676:	90 96       	adiw	r26, 0x20	; 32
 678:	3c 91       	ld	r19, X
 67a:	90 97       	sbiw	r26, 0x20	; 32
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	01 88       	ldd	r0, Z+17	; 0x11
 682:	02 c0       	rjmp	.+4      	; 0x688 <__LOCK_REGION_LENGTH__+0x288>
 684:	88 0f       	add	r24, r24
 686:	99 1f       	adc	r25, r25
 688:	0a 94       	dec	r0
 68a:	e2 f7       	brpl	.-8      	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
 68c:	80 95       	com	r24
 68e:	83 23       	and	r24, r19
 690:	90 96       	adiw	r26, 0x20	; 32
 692:	8c 93       	st	X, r24

if (lcd_D1 & 1)  _SFR_IO8(D5_PORT) |=   1<<D5_Bit ;
 694:	80 fe       	sbrs	r8, 0
 696:	11 c0       	rjmp	.+34     	; 0x6ba <__LOCK_REGION_LENGTH__+0x2ba>
 698:	a4 85       	ldd	r26, Z+12	; 0x0c
 69a:	b0 e0       	ldi	r27, 0x00	; 0
 69c:	90 96       	adiw	r26, 0x20	; 32
 69e:	3c 91       	ld	r19, X
 6a0:	90 97       	sbiw	r26, 0x20	; 32
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	06 84       	ldd	r0, Z+14	; 0x0e
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <__LOCK_REGION_LENGTH__+0x2ae>
 6aa:	88 0f       	add	r24, r24
 6ac:	99 1f       	adc	r25, r25
 6ae:	0a 94       	dec	r0
 6b0:	e2 f7       	brpl	.-8      	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
 6b2:	83 2b       	or	r24, r19
 6b4:	90 96       	adiw	r26, 0x20	; 32
 6b6:	8c 93       	st	X, r24
 6b8:	11 c0       	rjmp	.+34     	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>
else			 _SFR_IO8(D5_PORT) &= ~(1<<D5_Bit);
 6ba:	a4 85       	ldd	r26, Z+12	; 0x0c
 6bc:	b0 e0       	ldi	r27, 0x00	; 0
 6be:	90 96       	adiw	r26, 0x20	; 32
 6c0:	3c 91       	ld	r19, X
 6c2:	90 97       	sbiw	r26, 0x20	; 32
 6c4:	81 e0       	ldi	r24, 0x01	; 1
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	06 84       	ldd	r0, Z+14	; 0x0e
 6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <__LOCK_REGION_LENGTH__+0x2d0>
 6cc:	88 0f       	add	r24, r24
 6ce:	99 1f       	adc	r25, r25
 6d0:	0a 94       	dec	r0
 6d2:	e2 f7       	brpl	.-8      	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
 6d4:	80 95       	com	r24
 6d6:	83 23       	and	r24, r19
 6d8:	90 96       	adiw	r26, 0x20	; 32
 6da:	8c 93       	st	X, r24
	
if (lcd_D0 & 1)  _SFR_IO8(D4_PORT) |=   1<<D4_Bit ;
 6dc:	20 ff       	sbrs	r18, 0
 6de:	11 c0       	rjmp	.+34     	; 0x702 <__LOCK_REGION_LENGTH__+0x302>
 6e0:	a1 85       	ldd	r26, Z+9	; 0x09
 6e2:	b0 e0       	ldi	r27, 0x00	; 0
 6e4:	90 96       	adiw	r26, 0x20	; 32
 6e6:	2c 91       	ld	r18, X
 6e8:	90 97       	sbiw	r26, 0x20	; 32
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	03 84       	ldd	r0, Z+11	; 0x0b
 6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
 6f2:	88 0f       	add	r24, r24
 6f4:	99 1f       	adc	r25, r25
 6f6:	0a 94       	dec	r0
 6f8:	e2 f7       	brpl	.-8      	; 0x6f2 <__LOCK_REGION_LENGTH__+0x2f2>
 6fa:	82 2b       	or	r24, r18
 6fc:	90 96       	adiw	r26, 0x20	; 32
 6fe:	8c 93       	st	X, r24
 700:	11 c0       	rjmp	.+34     	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
else			 _SFR_IO8(D4_PORT) &= ~(1<<D4_Bit);
 702:	a1 85       	ldd	r26, Z+9	; 0x09
 704:	b0 e0       	ldi	r27, 0x00	; 0
 706:	90 96       	adiw	r26, 0x20	; 32
 708:	2c 91       	ld	r18, X
 70a:	90 97       	sbiw	r26, 0x20	; 32
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	03 84       	ldd	r0, Z+11	; 0x0b
 712:	02 c0       	rjmp	.+4      	; 0x718 <__LOCK_REGION_LENGTH__+0x318>
 714:	88 0f       	add	r24, r24
 716:	99 1f       	adc	r25, r25
 718:	0a 94       	dec	r0
 71a:	e2 f7       	brpl	.-8      	; 0x714 <__LOCK_REGION_LENGTH__+0x314>
 71c:	80 95       	com	r24
 71e:	82 23       	and	r24, r18
 720:	90 96       	adiw	r26, 0x20	; 32
 722:	8c 93       	st	X, r24

//SENDING
	_SFR_IO8(E_PORT)  |=   1<<E_Bit  ;
 724:	a6 81       	ldd	r26, Z+6	; 0x06
 726:	b0 e0       	ldi	r27, 0x00	; 0
 728:	90 96       	adiw	r26, 0x20	; 32
 72a:	4c 91       	ld	r20, X
 72c:	90 97       	sbiw	r26, 0x20	; 32
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	9c 01       	movw	r18, r24
 734:	00 84       	ldd	r0, Z+8	; 0x08
 736:	02 c0       	rjmp	.+4      	; 0x73c <__LOCK_REGION_LENGTH__+0x33c>
 738:	22 0f       	add	r18, r18
 73a:	33 1f       	adc	r19, r19
 73c:	0a 94       	dec	r0
 73e:	e2 f7       	brpl	.-8      	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
 740:	24 2b       	or	r18, r20
 742:	90 96       	adiw	r26, 0x20	; 32
 744:	2c 93       	st	X, r18
 746:	af ec       	ldi	r26, 0xCF	; 207
 748:	b7 e0       	ldi	r27, 0x07	; 7
 74a:	11 97       	sbiw	r26, 0x01	; 1
 74c:	f1 f7       	brne	.-4      	; 0x74a <__LOCK_REGION_LENGTH__+0x34a>
 74e:	00 c0       	rjmp	.+0      	; 0x750 <__LOCK_REGION_LENGTH__+0x350>
 750:	00 00       	nop
	_delay_ms(E_DELAY);
	_SFR_IO8(E_PORT)  &=~(1<<E_Bit);  // All other bits untouched and E = 0
 752:	a6 81       	ldd	r26, Z+6	; 0x06
 754:	b0 e0       	ldi	r27, 0x00	; 0
 756:	90 96       	adiw	r26, 0x20	; 32
 758:	3c 91       	ld	r19, X
 75a:	90 97       	sbiw	r26, 0x20	; 32
 75c:	ac 01       	movw	r20, r24
 75e:	00 84       	ldd	r0, Z+8	; 0x08
 760:	02 c0       	rjmp	.+4      	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
 762:	44 0f       	add	r20, r20
 764:	55 1f       	adc	r21, r21
 766:	0a 94       	dec	r0
 768:	e2 f7       	brpl	.-8      	; 0x762 <__LOCK_REGION_LENGTH__+0x362>
 76a:	24 2f       	mov	r18, r20
 76c:	20 95       	com	r18
 76e:	23 23       	and	r18, r19
 770:	90 96       	adiw	r26, 0x20	; 32
 772:	2c 93       	st	X, r18
 774:	af ec       	ldi	r26, 0xCF	; 207
 776:	b7 e0       	ldi	r27, 0x07	; 7
 778:	11 97       	sbiw	r26, 0x01	; 1
 77a:	f1 f7       	brne	.-4      	; 0x778 <__LOCK_REGION_LENGTH__+0x378>
 77c:	00 c0       	rjmp	.+0      	; 0x77e <__LOCK_REGION_LENGTH__+0x37e>
 77e:	00 00       	nop
	_delay_ms(E_DELAY);
	
	_SFR_IO8(RS_PORT) &= ~(1<<RS_Bit);
 780:	a0 81       	ld	r26, Z
 782:	b0 e0       	ldi	r27, 0x00	; 0
 784:	90 96       	adiw	r26, 0x20	; 32
 786:	3c 91       	ld	r19, X
 788:	90 97       	sbiw	r26, 0x20	; 32
 78a:	ac 01       	movw	r20, r24
 78c:	02 80       	ldd	r0, Z+2	; 0x02
 78e:	02 c0       	rjmp	.+4      	; 0x794 <__LOCK_REGION_LENGTH__+0x394>
 790:	44 0f       	add	r20, r20
 792:	55 1f       	adc	r21, r21
 794:	0a 94       	dec	r0
 796:	e2 f7       	brpl	.-8      	; 0x790 <__LOCK_REGION_LENGTH__+0x390>
 798:	24 2f       	mov	r18, r20
 79a:	20 95       	com	r18
 79c:	23 23       	and	r18, r19
 79e:	90 96       	adiw	r26, 0x20	; 32
 7a0:	2c 93       	st	X, r18
	_SFR_IO8(RW_PORT) &= ~(1<<RW_Bit);
 7a2:	a3 81       	ldd	r26, Z+3	; 0x03
 7a4:	b0 e0       	ldi	r27, 0x00	; 0
 7a6:	90 96       	adiw	r26, 0x20	; 32
 7a8:	3c 91       	ld	r19, X
 7aa:	90 97       	sbiw	r26, 0x20	; 32
 7ac:	ac 01       	movw	r20, r24
 7ae:	05 80       	ldd	r0, Z+5	; 0x05
 7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
 7b2:	44 0f       	add	r20, r20
 7b4:	55 1f       	adc	r21, r21
 7b6:	0a 94       	dec	r0
 7b8:	e2 f7       	brpl	.-8      	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
 7ba:	24 2f       	mov	r18, r20
 7bc:	20 95       	com	r18
 7be:	23 23       	and	r18, r19
 7c0:	90 96       	adiw	r26, 0x20	; 32
 7c2:	2c 93       	st	X, r18
	_SFR_IO8(D7_PORT) &= ~(1<<D7_Bit);
 7c4:	a2 89       	ldd	r26, Z+18	; 0x12
 7c6:	b0 e0       	ldi	r27, 0x00	; 0
 7c8:	90 96       	adiw	r26, 0x20	; 32
 7ca:	3c 91       	ld	r19, X
 7cc:	90 97       	sbiw	r26, 0x20	; 32
 7ce:	ac 01       	movw	r20, r24
 7d0:	04 88       	ldd	r0, Z+20	; 0x14
 7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
 7d4:	44 0f       	add	r20, r20
 7d6:	55 1f       	adc	r21, r21
 7d8:	0a 94       	dec	r0
 7da:	e2 f7       	brpl	.-8      	; 0x7d4 <__LOCK_REGION_LENGTH__+0x3d4>
 7dc:	24 2f       	mov	r18, r20
 7de:	20 95       	com	r18
 7e0:	23 23       	and	r18, r19
 7e2:	90 96       	adiw	r26, 0x20	; 32
 7e4:	2c 93       	st	X, r18
	_SFR_IO8(D6_PORT) &= ~(1<<D6_Bit);
 7e6:	a7 85       	ldd	r26, Z+15	; 0x0f
 7e8:	b0 e0       	ldi	r27, 0x00	; 0
 7ea:	90 96       	adiw	r26, 0x20	; 32
 7ec:	3c 91       	ld	r19, X
 7ee:	90 97       	sbiw	r26, 0x20	; 32
 7f0:	ac 01       	movw	r20, r24
 7f2:	01 88       	ldd	r0, Z+17	; 0x11
 7f4:	02 c0       	rjmp	.+4      	; 0x7fa <__LOCK_REGION_LENGTH__+0x3fa>
 7f6:	44 0f       	add	r20, r20
 7f8:	55 1f       	adc	r21, r21
 7fa:	0a 94       	dec	r0
 7fc:	e2 f7       	brpl	.-8      	; 0x7f6 <__LOCK_REGION_LENGTH__+0x3f6>
 7fe:	24 2f       	mov	r18, r20
 800:	20 95       	com	r18
 802:	23 23       	and	r18, r19
 804:	90 96       	adiw	r26, 0x20	; 32
 806:	2c 93       	st	X, r18
	_SFR_IO8(D5_PORT) &= ~(1<<D5_Bit);
 808:	a4 85       	ldd	r26, Z+12	; 0x0c
 80a:	b0 e0       	ldi	r27, 0x00	; 0
 80c:	90 96       	adiw	r26, 0x20	; 32
 80e:	3c 91       	ld	r19, X
 810:	90 97       	sbiw	r26, 0x20	; 32
 812:	ac 01       	movw	r20, r24
 814:	06 84       	ldd	r0, Z+14	; 0x0e
 816:	02 c0       	rjmp	.+4      	; 0x81c <__LOCK_REGION_LENGTH__+0x41c>
 818:	44 0f       	add	r20, r20
 81a:	55 1f       	adc	r21, r21
 81c:	0a 94       	dec	r0
 81e:	e2 f7       	brpl	.-8      	; 0x818 <__LOCK_REGION_LENGTH__+0x418>
 820:	24 2f       	mov	r18, r20
 822:	20 95       	com	r18
 824:	23 23       	and	r18, r19
 826:	90 96       	adiw	r26, 0x20	; 32
 828:	2c 93       	st	X, r18
	_SFR_IO8(D4_PORT) &= ~(1<<D4_Bit);
 82a:	a1 85       	ldd	r26, Z+9	; 0x09
 82c:	b0 e0       	ldi	r27, 0x00	; 0
 82e:	90 96       	adiw	r26, 0x20	; 32
 830:	2c 91       	ld	r18, X
 832:	90 97       	sbiw	r26, 0x20	; 32
 834:	03 84       	ldd	r0, Z+11	; 0x0b
 836:	02 c0       	rjmp	.+4      	; 0x83c <__LOCK_REGION_LENGTH__+0x43c>
 838:	88 0f       	add	r24, r24
 83a:	99 1f       	adc	r25, r25
 83c:	0a 94       	dec	r0
 83e:	e2 f7       	brpl	.-8      	; 0x838 <__LOCK_REGION_LENGTH__+0x438>
 840:	80 95       	com	r24
 842:	82 23       	and	r24, r18
 844:	90 96       	adiw	r26, 0x20	; 32
 846:	8c 93       	st	X, r24
}
 848:	df 91       	pop	r29
 84a:	cf 91       	pop	r28
 84c:	1f 91       	pop	r17
 84e:	0f 91       	pop	r16
 850:	ff 90       	pop	r15
 852:	ef 90       	pop	r14
 854:	df 90       	pop	r13
 856:	cf 90       	pop	r12
 858:	bf 90       	pop	r11
 85a:	af 90       	pop	r10
 85c:	9f 90       	pop	r9
 85e:	8f 90       	pop	r8
 860:	08 95       	ret

00000862 <main>:


	public:
	CH_LCD ();
	
	void SetRSPin(uint8_t ADD_PORT , uint8_t ADD_DDR , uint8_t Bit) { RS_PORT = ADD_PORT ; RS_DDR = ADD_DDR ; RS_Bit = Bit ; }
 862:	e0 e6       	ldi	r30, 0x60	; 96
 864:	f0 e0       	ldi	r31, 0x00	; 0
 866:	95 e1       	ldi	r25, 0x15	; 21
 868:	90 83       	st	Z, r25
 86a:	84 e1       	ldi	r24, 0x14	; 20
 86c:	81 83       	std	Z+1, r24	; 0x01
 86e:	12 82       	std	Z+2, r1	; 0x02
	void SetRWPin(uint8_t ADD_PORT , uint8_t ADD_DDR , uint8_t Bit) { RW_PORT = ADD_PORT ; RW_DDR = ADD_DDR ; RW_Bit = Bit ; }
 870:	93 83       	std	Z+3, r25	; 0x03
 872:	84 83       	std	Z+4, r24	; 0x04
 874:	21 e0       	ldi	r18, 0x01	; 1
 876:	25 83       	std	Z+5, r18	; 0x05
	void SetEPin(uint8_t ADD_PORT , uint8_t ADD_DDR , uint8_t Bit) { E_PORT = ADD_PORT ; E_DDR = ADD_DDR ; E_Bit = Bit ; }
 878:	96 83       	std	Z+6, r25	; 0x06
 87a:	87 83       	std	Z+7, r24	; 0x07
 87c:	22 e0       	ldi	r18, 0x02	; 2
 87e:	20 87       	std	Z+8, r18	; 0x08
	void SetD4Pin(uint8_t ADD_PORT , uint8_t ADD_DDR , uint8_t Bit) { D4_PORT = ADD_PORT ; D4_DDR = ADD_DDR ; D4_Bit = Bit ; }
 880:	91 87       	std	Z+9, r25	; 0x09
 882:	82 87       	std	Z+10, r24	; 0x0a
 884:	23 e0       	ldi	r18, 0x03	; 3
 886:	23 87       	std	Z+11, r18	; 0x0b
	void SetD5Pin(uint8_t ADD_PORT , uint8_t ADD_DDR , uint8_t Bit) { D5_PORT = ADD_PORT ; D5_DDR = ADD_DDR ; D5_Bit = Bit ; }
 888:	94 87       	std	Z+12, r25	; 0x0c
 88a:	85 87       	std	Z+13, r24	; 0x0d
 88c:	24 e0       	ldi	r18, 0x04	; 4
 88e:	26 87       	std	Z+14, r18	; 0x0e
	void SetD6Pin(uint8_t ADD_PORT , uint8_t ADD_DDR , uint8_t Bit) { D6_PORT = ADD_PORT ; D6_DDR = ADD_DDR ; D6_Bit = Bit ; }
 890:	97 87       	std	Z+15, r25	; 0x0f
 892:	80 8b       	std	Z+16, r24	; 0x10
 894:	25 e0       	ldi	r18, 0x05	; 5
 896:	21 8b       	std	Z+17, r18	; 0x11
	void SetD7Pin(uint8_t ADD_PORT , uint8_t ADD_DDR , uint8_t Bit) { D7_PORT = ADD_PORT ; D7_DDR = ADD_DDR ; D7_Bit = Bit ; }
 898:	92 8b       	std	Z+18, r25	; 0x12
 89a:	83 8b       	std	Z+19, r24	; 0x13
 89c:	86 e0       	ldi	r24, 0x06	; 6
 89e:	84 8b       	std	Z+20, r24	; 0x14
	LCD1.SetEPin  (ADD(PORTC),ADD(DDRC),2);
	LCD1.SetD4Pin (ADD(PORTC),ADD(DDRC),3);
	LCD1.SetD5Pin (ADD(PORTC),ADD(DDRC),4);
	LCD1.SetD6Pin (ADD(PORTC),ADD(DDRC),5);
	LCD1.SetD7Pin (ADD(PORTC),ADD(DDRC),6);
	LCD1.Init();
 8a0:	cf 01       	movw	r24, r30
 8a2:	0e 94 69 00 	call	0xd2	; 0xd2 <_ZN6CH_LCD4InitEv>
	
	//PORTC=255;
	//_delay_ms(2000);
	//PORTC = 0;
	//_delay_ms(2000);	
	LCD1.SendCommand(0,0,0B00100000);//3
 8a6:	20 e2       	ldi	r18, 0x20	; 32
 8a8:	40 e0       	ldi	r20, 0x00	; 0
 8aa:	60 e0       	ldi	r22, 0x00	; 0
 8ac:	80 e6       	ldi	r24, 0x60	; 96
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	0e 94 bf 01 	call	0x37e	; 0x37e <_ZN6CH_LCD11SendCommandEhhh>
 8b4:	8f ec       	ldi	r24, 0xCF	; 207
 8b6:	97 e0       	ldi	r25, 0x07	; 7
 8b8:	01 97       	sbiw	r24, 0x01	; 1
 8ba:	f1 f7       	brne	.-4      	; 0x8b8 <main+0x56>
 8bc:	00 c0       	rjmp	.+0      	; 0x8be <main+0x5c>
 8be:	00 00       	nop
	_delay_ms(delay);
	LCD1.SendCommand(0,0,0B00001110);//4
 8c0:	2e e0       	ldi	r18, 0x0E	; 14
 8c2:	40 e0       	ldi	r20, 0x00	; 0
 8c4:	60 e0       	ldi	r22, 0x00	; 0
 8c6:	80 e6       	ldi	r24, 0x60	; 96
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	0e 94 bf 01 	call	0x37e	; 0x37e <_ZN6CH_LCD11SendCommandEhhh>
 8ce:	8f ec       	ldi	r24, 0xCF	; 207
 8d0:	97 e0       	ldi	r25, 0x07	; 7
 8d2:	01 97       	sbiw	r24, 0x01	; 1
 8d4:	f1 f7       	brne	.-4      	; 0x8d2 <main+0x70>
 8d6:	00 c0       	rjmp	.+0      	; 0x8d8 <main+0x76>
 8d8:	00 00       	nop
	_delay_ms(delay);
	LCD1.SendCommand(0,0,0B00000110);//5
 8da:	26 e0       	ldi	r18, 0x06	; 6
 8dc:	40 e0       	ldi	r20, 0x00	; 0
 8de:	60 e0       	ldi	r22, 0x00	; 0
 8e0:	80 e6       	ldi	r24, 0x60	; 96
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	0e 94 bf 01 	call	0x37e	; 0x37e <_ZN6CH_LCD11SendCommandEhhh>
 8e8:	8f ec       	ldi	r24, 0xCF	; 207
 8ea:	97 e0       	ldi	r25, 0x07	; 7
 8ec:	01 97       	sbiw	r24, 0x01	; 1
 8ee:	f1 f7       	brne	.-4      	; 0x8ec <main+0x8a>
 8f0:	00 c0       	rjmp	.+0      	; 0x8f2 <main+0x90>
 8f2:	00 00       	nop
	_delay_ms(delay);
	LCD1.SendCommand(1,0,0B01001000);//6
 8f4:	28 e4       	ldi	r18, 0x48	; 72
 8f6:	40 e0       	ldi	r20, 0x00	; 0
 8f8:	61 e0       	ldi	r22, 0x01	; 1
 8fa:	80 e6       	ldi	r24, 0x60	; 96
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	0e 94 bf 01 	call	0x37e	; 0x37e <_ZN6CH_LCD11SendCommandEhhh>
 902:	8f ec       	ldi	r24, 0xCF	; 207
 904:	97 e0       	ldi	r25, 0x07	; 7
 906:	01 97       	sbiw	r24, 0x01	; 1
 908:	f1 f7       	brne	.-4      	; 0x906 <main+0xa4>
 90a:	00 c0       	rjmp	.+0      	; 0x90c <main+0xaa>
 90c:	00 00       	nop
	_delay_ms(delay);
	
	while(1)
	{
	LCD1.SendCommand(1,0,0B01001000);//6
 90e:	28 e4       	ldi	r18, 0x48	; 72
 910:	40 e0       	ldi	r20, 0x00	; 0
 912:	61 e0       	ldi	r22, 0x01	; 1
 914:	80 e6       	ldi	r24, 0x60	; 96
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	0e 94 bf 01 	call	0x37e	; 0x37e <_ZN6CH_LCD11SendCommandEhhh>
 91c:	9f e7       	ldi	r25, 0x7F	; 127
 91e:	2a e1       	ldi	r18, 0x1A	; 26
 920:	86 e0       	ldi	r24, 0x06	; 6
 922:	91 50       	subi	r25, 0x01	; 1
 924:	20 40       	sbci	r18, 0x00	; 0
 926:	80 40       	sbci	r24, 0x00	; 0
 928:	e1 f7       	brne	.-8      	; 0x922 <main+0xc0>
 92a:	00 c0       	rjmp	.+0      	; 0x92c <main+0xca>
 92c:	00 00       	nop
 92e:	ef cf       	rjmp	.-34     	; 0x90e <main+0xac>

00000930 <_GLOBAL__sub_I__ZN6CH_LCDC2Ev>:
#define _CH_LCD_
#define delay 1
#include "D:\GitHub\MYLCDLIB\Lib\mlcd.cpp"
#include "D:\GitHub\MYLCDLIB\Lib\mlcd.h"

CH_LCD LCD1;
 930:	80 e6       	ldi	r24, 0x60	; 96
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	0e 94 4a 00 	call	0x94	; 0x94 <_ZN6CH_LCDC1Ev>
 938:	08 95       	ret

0000093a <__tablejump2__>:
 93a:	ee 0f       	add	r30, r30
 93c:	ff 1f       	adc	r31, r31
 93e:	05 90       	lpm	r0, Z+
 940:	f4 91       	lpm	r31, Z
 942:	e0 2d       	mov	r30, r0
 944:	09 94       	ijmp

00000946 <_exit>:
 946:	f8 94       	cli

00000948 <__stop_program>:
 948:	ff cf       	rjmp	.-2      	; 0x948 <__stop_program>
